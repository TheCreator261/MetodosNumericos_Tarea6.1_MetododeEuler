# -*- coding: utf-8 -*-
"""Tarea 6.1 Metodo de Euler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rycVECXnQChyaFYuAyJRZiBFTvcI9c0d
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1: Carga de un capacitor

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros del circuito
R = 1000  # Ohms
C = 0.001  # Farads
V_fuente = 5  # Volts

# Definición de la EDO: dV/dt = (V_fuente - V)/(R*C)
def f(t, V):
    return (V_fuente - V)/(R*C)

# Condiciones iniciales
t0 = 0
V0 = 0
tf = 5
n = 20

# Paso
h = (tf - t0)/n

# Solución analítica
def sol_analitica(t):
    return V_fuente * (1 - np.exp(-t/(R*C)))

# Método de Euler
t_vals = [t0]
V_aprox = [V0]
V_exacta = [sol_analitica(t0)]

t = t0
V = V0
for _ in range(n):
    V = V + h * f(t, V)
    t = t + h
    t_vals.append(t)
    V_aprox.append(V)
    V_exacta.append(sol_analitica(t))

# Resultados en DataFrame
df = pd.DataFrame({
    'Tiempo (s)': t_vals,
    'Voltaje Aprox (V)': V_aprox,
    'Voltaje Exacto (V)': V_exacta,
    'Error Absoluto': np.abs(np.array(V_aprox) - np.array(V_exacta))
})
print(df)

# Gráfica comparativa
plt.figure(figsize=(10,6))
plt.plot(t_vals, V_aprox, 'bo-', label='Solución Euler')
plt.plot(t_vals, V_exacta, 'r-', label='Solución Analítica')
plt.title('Carga de capacitor - Comparación Euler vs Analítica')
plt.xlabel('Tiempo (s)')
plt.ylabel('Voltaje (V)')
plt.legend()
plt.grid(True)
plt.savefig('ejercicio1_euler.png', dpi=300)
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 2: Caída libre con resistencia

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros físicos
g = 9.81  # m/s²
m = 2     # kg
k = 0.5   # kg/s

# Definición de la EDO: dv/dt = g - (k/m)*v
def f(t, v):
    return g - (k/m)*v

# Condiciones iniciales
t0 = 0
v0 = 0
tf = 10
n = 50

# Solución analítica
def sol_analitica(t):
    return (m*g/k)*(1 - np.exp(-(k/m)*t))

# Método de Euler
h = (tf - t0)/n
t_vals = np.linspace(t0, tf, n+1)
v_aprox = np.zeros(n+1)
v_exacta = sol_analitica(t_vals)

v_aprox[0] = v0
for i in range(n):
    v_aprox[i+1] = v_aprox[i] + h * f(t_vals[i], v_aprox[i])

# Resultados en DataFrame
df = pd.DataFrame({
    'Tiempo (s)': t_vals,
    'Velocidad Aprox (m/s)': v_aprox,
    'Velocidad Exacta (m/s)': v_exacta,
    'Error Relativo (%)': 100*np.abs((v_aprox - v_exacta)/v_exacta)
})
print(df.tail())  # Últimas 5 filas

# Gráfica comparativa
plt.figure(figsize=(10,6))
plt.plot(t_vals, v_aprox, 'bo-', markersize=4, label='Euler (n=50)')
plt.plot(t_vals, v_exacta, 'r-', label='Solución Exacta')
plt.title('Velocidad terminal con resistencia del aire')
plt.xlabel('Tiempo (s)')
plt.ylabel('Velocidad (m/s)')
plt.legend()
plt.grid(True)
plt.savefig('ejercicio2_euler.png', dpi=300)
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 3: Enfriamiento de un cuerpo

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parámetros térmicos
T_amb = 25  # °C
k = 0.07    # Coeficiente de enfriamiento

# Definición de la EDO: dT/dt = -k*(T - T_amb)
def f(t, T):
    return -k * (T - T_amb)

# Condiciones iniciales
t0 = 0
T0 = 90
tf = 30  # minutos
n = 30

# Solución analítica
def sol_analitica(t):
    return T_amb + (T0 - T_amb)*np.exp(-k*t)

# Método de Euler
h = (tf - t0)/n
t_vals = np.linspace(t0, tf, n+1)
T_aprox = np.zeros(n+1)
T_exacta = sol_analitica(t_vals)

T_aprox[0] = T0
for i in range(n):
    T_aprox[i+1] = T_aprox[i] + h * f(t_vals[i], T_aprox[i])

# Resultados en DataFrame
df = pd.DataFrame({
    'Tiempo (min)': t_vals,
    'Temp Aprox (°C)': T_aprox,
    'Temp Exacta (°C)': T_exacta,
    'Diferencia (°C)': np.abs(T_aprox - T_exacta)
})
print(df.iloc[::5])  # Muestra cada 5 filas

# Gráfica comparativa
plt.figure(figsize=(10,6))
plt.plot(t_vals, T_aprox, 'bo-', label='Euler (n=30)')
plt.plot(t_vals, T_exacta, 'r-', label='Solución Exacta')
plt.title('Ley de Enfriamiento de Newton')
plt.xlabel('Tiempo (minutos)')
plt.ylabel('Temperatura (°C)')
plt.legend()
plt.grid(True)
plt.savefig('ejercicio3_euler.png', dpi=300)
plt.show()